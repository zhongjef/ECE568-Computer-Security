#Peiqi Hu, 1002263935, peiqi.hu@mail.utoronto.ca
#Jefferson Zhong, 1003946000, jefferson.zhong@mail.utoronto.ca

------------------------------------------------------------------------
sploit1: This is a buffer overflow vulnerability. To overwrite the memory from the beginning 
of the buffer to the rip, we inject a buffer with 141 bytes which starts with 91 NOPs, 
then the shellcode and lastly the guessed return address with a null terminator. 
The guessed return address is the beginning of the buffer's location.  

------------------------------------------------------------------------
sploit2: An exploit targeting buffer overflow vulnerability in target2.c

Target2's buffer is of size 252, and our attack string is 288 characters
long. In order to override the buffer, we override the loop counter j and
loop condition len to ultimately override the return address. The critical
part was to ensure the order the variables are declared, and how to use 
environmental variables to send in the NULL terminators.

------------------------------------------------------------------------
sploit3: This is a buffer overflow, similar to sploit1, with buffer size 64 bytes. 
Using gdb(especially inside foo) to figure out rip and the targ location, 
and then calculate the buffer size needs to exploit the vulnerability is 69 bytes. 
Fill the attacker buffer first with 19 NOPS, then shellcode and the guessed return address
with a null terminator.  

------------------------------------------------------------------------
sploit4: An exploit targeting buffer overflow vulnerability in target4.c

Target4's buffer is of size 188 and our attack string has 224 characters.
This sploit is similar to sploit2.c in which both sploit override loop counter
and loop conditions. However, more more environmental variables must be used
to pass in more NULL terminators. A critical part of this sploit is to
realize in what order the variables are delcared.

------------------------------------------------------------------------
sploit5: This is a format string vulnerability. By using gdb, we find that 
there are 40 bytes between the argument pointer and the first byte of the format string. 
In other words, when we calculate number of bytes needed, that value should minus
not only shellcode size but also 32 bytes, in order to move the argument pointer to 
the beginning of the format string. We use env to pass null to fill the return addresses,
and three junks between return addresses, followed by a buffer with shellcode and 
a series of %x and %hhn. So that we can write desired return addr value to the specified return address. 

------------------------------------------------------------------------
sploit6: This is a double free vulnerability. We create two fake tags, one right before the q, 
the other right after the p's real tag. By finding the difference between the memory location 
of p and q (which is 80 bytes), we create a buffer with 81 bytes (extra byte for null). 
Fill the buffer with first fake tag(its prev points to the p.tag.next, its next filled with x01),
following with the shellcode, then fill with x01 again until the second fake tag. 
The second fake tag's prev points to the p, next points to the guessed return address 
which is rip. Lastly, fill the last byte of the buffer with null. 
